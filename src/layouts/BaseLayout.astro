---
export interface Props {
  title?: string;
  description?: string;
}

const { title = 'Black Lodge Brews', description = 'Premium craft brewery with mysterious charm' } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{title}</title>
  <meta name="description" content={description}>
  
  <!-- Mobile status bar styling -->
  <meta name="theme-color" content="#1A0E0A">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <meta name="msapplication-navbutton-color" content="#1A0E0A">
  
  <link rel="icon" type="image/svg+xml" href="/favicon.svg">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Oswald:wght@400;500;600;700&family=Alfa+Slab+One&display=swap" rel="stylesheet">
</head>
<body>
  <div class="liquid-page-transition" id="pageTransition"></div>
  
  <nav class="vertical-navbar">
    <a href="#taps" class="nav-link">Tap List</a>
    <a href="#story" class="nav-link">Our Story</a>
    <a href="#taproom" class="nav-link">Taproom</a>
    <a href="#contact" class="nav-link">Contact</a>
  </nav>

  <main>
    <slot />
  </main>

  <footer class="footer">
    <div class="container">
      <div class="footer-content">
        <div class="footer-section">
          <h3>Black Lodge Brews</h3>
          <p>Crafting mysterious and exceptional beers since 2023</p>
        </div>
        <div class="footer-section">
          <h4>Hours</h4>
          <p>Mon-Thu: 4pm-10pm</p>
          <p>Fri-Sat: 2pm-12am</p>
          <p>Sun: 2pm-9pm</p>
        </div>
        <div class="footer-section">
          <h4>Contact</h4>
          <p>123 Brewery Lane</p>
          <p>Portland, OR 97210</p>
          <p>(503) 555-BREW</p>
        </div>
      </div>
      <div class="footer-bottom">
        <p>&copy; 2024 Black Lodge Brews. All rights reserved.</p>
      </div>
    </div>
  </footer>

  <script>
    // Navigation active state management
    class NavigationManager {
      constructor() {
        this.sections = ['taps', 'story', 'taproom', 'contact'];
        this.links = {};
        this.currentActive = null;
        this.init();
      }

      init() {
        // Cache navigation links
        this.sections.forEach(sectionId => {
          this.links[sectionId] = document.querySelector(`[href="#${sectionId}"]`);
        });

        // Set up smooth scrolling with active state updates
        this.setupSmoothScrolling();
        
        // Set up scroll tracking for active states
        this.setupScrollTracking();
        
        // Set initial active state
        this.updateActiveState();
      }

      setupSmoothScrolling() {
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
          anchor.addEventListener('click', (e) => {
            e.preventDefault();
            const targetId = anchor.getAttribute('href').substring(1);
            const target = document.getElementById(targetId);
            
            if (target) {
              // Update active state immediately on click
              this.setActiveLink(targetId);
              
              // Smooth scroll to target
              target.scrollIntoView({
                behavior: 'smooth'
              });
            }
          });
        });
      }

      setupScrollTracking() {
        let ticking = false;
        
        const handleScroll = () => {
          if (!ticking) {
            requestAnimationFrame(() => {
              this.updateActiveState();
              ticking = false;
            });
            ticking = true;
          }
        };

        window.addEventListener('scroll', handleScroll, { passive: true });
      }

      updateActiveState() {
        const scrollY = window.scrollY + 100; // Offset for better UX
        let activeSection = null;

        // Find which section is currently in view
        this.sections.forEach(sectionId => {
          const section = document.getElementById(sectionId);
          if (section) {
            const sectionTop = section.offsetTop;
            const sectionBottom = sectionTop + section.offsetHeight;
            
            if (scrollY >= sectionTop && scrollY < sectionBottom) {
              activeSection = sectionId;
            }
          }
        });

        // Default to first section if near top of page
        if (!activeSection && window.scrollY < 200) {
          activeSection = this.sections[0];
        }

        // Update active link if changed
        if (activeSection && activeSection !== this.currentActive) {
          this.setActiveLink(activeSection);
        }
      }

      setActiveLink(sectionId) {
        // Remove active class from all links
        Object.values(this.links).forEach(link => {
          if (link) link.classList.remove('active');
        });

        // Add active class to current link
        if (this.links[sectionId]) {
          this.links[sectionId].classList.add('active');
          this.currentActive = sectionId;
        }
      }
    }

    // Liquid page transition effect
    function triggerPageTransition() {
      const transition = document.getElementById('pageTransition');
      if (transition) {
        transition.classList.add('active');
        setTimeout(() => {
          transition.classList.remove('active');
        }, 800);
      }
    }

    // Scroll animations
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('fade-in-up');
        }
      });
    }, observerOptions);

    document.querySelectorAll('.section').forEach(section => {
      observer.observe(section);
    });

    // Initialize navigation manager when DOM is ready
    document.addEventListener('DOMContentLoaded', () => {
      new NavigationManager();
    });
  </script>
</body>
</html>

<style lang="scss">
  @import '../styles/global.scss';


  .vertical-navbar {
    position: fixed;
    top: 40%;
    right: 5px;
    margin-right: 5vw;
    transform: translateY(-50%);
    display: flex;
    flex-direction: column;
    gap: $spacing-md;
    z-index: 1001;
    
    .nav-link {
      background: rgba(26, 14, 10, 0);
      color: $foam-cream;
      text-decoration: none;
      padding: calc($spacing-sm * 0.75);
      border-radius: $border-radius-md;
      font-weight: 500;
      font-size: 0.675rem;
      border: 1px solid #FFA000;
      transition: all $transition-fast;
      text-align: center;
      backdrop-filter: blur(10px);
      
      &:hover {
        background: rgba(255, 160, 0, 0.2);
        color: $amber-gold;
        border-color: rgba(255, 160, 0, 0.5);
      }
      
      &.active {
        background: rgba(255, 160, 0, 0.3);
        color: $amber-gold;
        border-color: $amber-gold;
        box-shadow: 0 0 10px rgba(255, 160, 0, 0.3);
      }
    }
  }

  main {
    padding-top: 0;
  }

  .footer {
    background: $roasted-malt;
    padding: $spacing-xxl 0 $spacing-md;
    
    .footer-content {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: $spacing-lg;
      margin-bottom: $spacing-lg;
    }
    
    .footer-section {
      h3, h4 {
        color: $amber-gold;
        margin-bottom: $spacing-sm;
      }
      
      p {
        color: rgba(245, 230, 211, 0.8);
        margin-bottom: $spacing-xs;
      }
    }
    
    .footer-bottom {
      padding-top: $spacing-md;
      border-top: 1px solid rgba(245, 230, 211, 0.2);
      text-align: center;
      color: rgba(245, 230, 211, 0.6);
      font-size: 0.8rem;
    }
  }

</style>