---
export interface Props {
  glassType?: 'pint' | 'tulip' | 'snifter';
  beerColor?: string;
  foamColor?: string;
  autoStart?: boolean;
  duration?: number;
}

const { 
  glassType = 'pint',
  beerColor = '#FFA000',
  foamColor = '#FFFBF0',
  autoStart = true,
  duration = 3
} = Astro.props;
---

<div class={`pour-animation ${glassType}-glass`} data-beer-color={beerColor} data-foam-color={foamColor} data-duration={duration}>
  <div class="pour-container">
    <div class="tap-spout">
      <div class="tap-handle"></div>
      <div class="pour-stream"></div>
    </div>
    
    <div class="beer-glass">
      <div class="glass-body">
        <div class="beer-level">
          <div class="beer-liquid"></div>
          <div class="beer-foam"></div>
        </div>
        <div class="glass-highlight"></div>
      </div>
      <div class="glass-base"></div>
    </div>
  </div>
</div>

<style lang="scss" is:global>
  @import '../styles/variables';

  .pour-animation {
    position: relative;
    width: 300px;
    height: 400px;
    margin: 0 auto;
    
    .pour-container {
      position: relative;
      width: 100%;
      height: 100%;
    }
    
    .tap-spout {
      position: absolute;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      width: 60px;
      height: 80px;
      
      .tap-handle {
        width: 60px;
        height: 40px;
        background: linear-gradient(135deg, #8D6E63, #5D4037);
        border-radius: 30px 30px 8px 8px;
        position: relative;
        
        &::before {
          content: '';
          position: absolute;
          top: 35px;
          left: 50%;
          transform: translateX(-50%);
          width: 20px;
          height: 15px;
          background: #3E2723;
          border-radius: 0 0 10px 10px;
        }
      }
      
      .pour-stream {
        position: absolute;
        top: 40px;
        left: 50%;
        transform: translateX(-50%);
        width: 8px;
        height: 0;
        background: linear-gradient(to bottom, #FFD54F, #FFA000);
        border-radius: 4px;
        opacity: 0;
        transition: all 0.3s ease;
        
        &::before {
          content: '';
          position: absolute;
          top: 0;
          left: 1px;
          width: 2px;
          height: 100%;
          background: rgba(255, 255, 255, 0.5);
          border-radius: 2px;
        }
      }
    }
    
    .beer-glass {
      position: absolute;
      bottom: 60px;
      left: 50%;
      transform: translateX(-50%);
      
      .glass-body {
        position: relative;
        overflow: hidden;
        margin: 0 auto;
        
        .beer-level {
          position: absolute;
          bottom: 0;
          left: 0;
          right: 0;
          height: 0%;
          transition: height 3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
          
          .beer-liquid {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 100%;
            background: linear-gradient(to top, #FFA000, #FFD54F);
            border-radius: inherit;
          }
          
          .beer-foam {
            position: absolute;
            top: -20px;
            left: 0;
            right: 0;
            height: 20px;
            background: linear-gradient(to bottom, rgba(255, 255, 255, 0.9), transparent);
            border-radius: 50px 50px 0 0;
            opacity: 0;
            transition: opacity 0.5s ease;
          }
        }
        
        .glass-highlight {
          position: absolute;
          top: 10%;
          left: 15%;
          width: 20%;
          height: 60%;
          background: linear-gradient(to bottom, rgba(255, 255, 255, 0.3), transparent);
          border-radius: 10px;
          opacity: 0.8;
        }
      }
      
      .glass-base {
        width: 80px;
        height: 8px;
        background: linear-gradient(to bottom, rgba(255, 255, 255, 0.2), rgba(255, 255, 255, 0.1));
        border-radius: 40px;
        margin: 0 auto;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
      }
    }
    
    // Glass types
    &.pint-glass .glass-body {
      width: 70px;
      height: 140px;
      background: linear-gradient(to bottom, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05));
      border-radius: 8px 8px 12px 12px;
      border: 2px solid rgba(255, 255, 255, 0.2);
    }
    
    &.tulip-glass .glass-body {
      width: 60px;
      height: 120px;
      background: linear-gradient(to bottom, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05));
      border-radius: 30px 30px 8px 8px;
      border: 2px solid rgba(255, 255, 255, 0.2);
    }
    
    &.snifter-glass .glass-body {
      width: 80px;
      height: 100px;
      background: linear-gradient(to bottom, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05));
      border-radius: 40px 40px 16px 16px;
      border: 2px solid rgba(255, 255, 255, 0.2);
    }

    /* Animation States */
    &.pouring .pour-stream {
      height: 140px !important;
      opacity: 1 !important;
    }

    &.pouring .beer-level,
    &.filled .beer-level {
      height: 85% !important;
    }

    &.pouring .beer-foam,
    &.filled .beer-foam {
      opacity: 1 !important;
    }
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .pour-animation {
      width: 200px;
      height: 300px;
    }
  }

  /* Accessibility */
  @media (prefers-reduced-motion: reduce) {
    .pour-animation {
      .beer-level,
      .pour-stream,
      .beer-foam {
        transition: none;
      }
    }
  }
</style>

<script>
  class PourAnimation {
    constructor(element) {
      this.element = element;
      this.isPouring = false;
      
      // Start immediately for testing
      setTimeout(() => {
        this.startPouring();
      }, 1000);
    }

    startPouring() {
      if (this.isPouring) return;
      
      console.log('Starting pour animation');
      this.isPouring = true;
      this.element.classList.add('pouring');
      console.log('Added pouring class to:', this.element);

      // Stop after 4 seconds
      setTimeout(() => {
        this.stopPouring();
      }, 4000);
    }

    stopPouring() {
      console.log('Stopping pour animation');
      this.isPouring = false;
      this.element.classList.remove('pouring');
      this.element.classList.add('filled');
    }
  }

  // Initialize pour animations
  document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM loaded, looking for pour animations');
    const pourAnimations = document.querySelectorAll('.pour-animation');
    console.log('Found animations:', pourAnimations.length);
    pourAnimations.forEach(animation => {
      console.log('Initializing animation for:', animation);
      new PourAnimation(animation);
    });
  });
</script>